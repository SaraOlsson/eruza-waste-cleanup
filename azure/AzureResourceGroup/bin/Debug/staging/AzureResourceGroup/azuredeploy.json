{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "speechsku": {
      "type": "string"
    },
    "iotcentraltemplate": {
      "type": "string"
    },
    "iotcentrallocation": {
      "type": "string"
    },
    "iotcentralsku": {
      "type": "string"
    },
    "acrSku": {
      "type": "string",
      "metadata": {
        "description": "Tier of your Azure Container Registry."
      },
      "defaultValue": "Basic",
      "allowedValues": [
        "Basic",
        "Standard",
        "Premium"
      ]
    }
  },
  "variables": {
    "prefix": "eruzawaste",
    "speechName": "[concat(variables('prefix'), 'speech')]",
    "storageName": "[concat(variables('prefix'), 'storage')]",
    "iotcentralName": "[concat(variables('prefix'), 'iotcentral')]",
    "iotcentralSubName": "[concat(variables('prefix'), 'iotcentralsub')]",
    "acrName": "[concat(variables('prefix'), 'acr')]"
  },
  "resources": [
    {
      "apiVersion": "2017-04-18",
      "name": "[variables('speechName')]",
      "location": "[resourceGroup().location]",
      "type": "Microsoft.CognitiveServices/accounts",
      "kind": "SpeechServices",
      "sku": {
        "name": "[parameters('speechsku')]"
      },
      "properties": {}
    },
    {
      "name": "[variables('storageName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "accessTier": "Hot",
        "minimumTlsVersion": "TLS1_2"
      },
      "dependsOn": [],
      "sku": {
        "name": "Standard_RAGRS"
      },
      "kind": "StorageV2",
      "tags": {}
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2020-08-01-preview",
      "name": "[concat(variables('storageName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]"
      ],
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "properties": {
        "cors": {
          "corsRules": [
            {
              "allowedOrigins": [
                "*"
              ],
              "allowedMethods": [
                "DELETE",
                "GET",
                "HEAD",
                "MERGE",
                "POST",
                "OPTIONS",
                "PUT"
              ],
              "maxAgeInSeconds": 86400,
              "exposedHeaders": [
                "*"
              ],
              "allowedHeaders": [
                "*"
              ]
            }
          ]
        },
        "deleteRetentionPolicy": {
          "enabled": false
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2020-08-01-preview",
      "name": "[concat(variables('storageName'), '/default/event-images')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]"
      ],
      "properties": {
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "Container"
      }
    },
    {
      "type": "Microsoft.IoTCentral/IoTApps",
      "name": "[variables('iotcentralName')]",
      "location": "[parameters('iotcentrallocation')]",
      "apiVersion": "2018-09-01",
      "sku": {
        "name": "[parameters('iotcentralsku')]"
      },
      "properties": {
        "displayName": "[variables('iotcentralName')]",
        "subdomain": "[variables('iotcentralSubName')]",
        "template": "[parameters('iotcentraltemplate')]"
      }
    },
    {
      "name": "[variables('acrName')]",
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2019-12-01-preview",
      "location": "[resourceGroup().location]",
      "comments": "Container registry for storing docker images",
      "tags": {
        "displayName": "Container Registry",
        "container.registry": "[variables('acrName')]"
      },
      "sku": {
        "name": "[parameters('acrSku')]",
        "tier": "[parameters('acrSku')]"
      },
      "properties": {
        "adminUserEnabled": "false"
      }
    }
  ],
  "outputs": {}
}
